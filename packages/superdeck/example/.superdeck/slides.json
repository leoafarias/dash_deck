[
  {
    "key": "YD8Lljdq",
    "options": {},
    "markdown": "@column\n\n## Another image Another image Another image Another image Another image Another image Another image Another image Another image Another image {.here}\n\n@column\n\n\n\n{\"asset\":{\"type\":\"LocalAsset\"},\"scrollable\":false} {.code}",
    "sections": [
      {
        "blocks": [
          {
            "content": "## Another image Another image Another image Another image Another image Another image Another image Another image Another image Another image {.here}",
            "scrollable": false,
            "__type": "ContentElement"
          },
          {
            "content": "{\"asset\":{\"type\":\"LocalAsset\"},\"scrollable\":false} {.code}",
            "scrollable": false,
            "__type": "ContentElement"
          }
        ]
      }
    ],
    "comments": []
  },
  {
    "key": "ToUV8xcA",
    "options": {},
    "markdown": "",
    "sections": [
      {
        "blocks": []
      }
    ],
    "comments": []
  },
  {
    "key": "WyJ8NjmF",
    "options": {},
    "markdown": "@section\n@section {flex: 2}\n@column {\n  align: center\n  flex: 2\n}\n\n\n```dart\nColumn(\n  crossAxisAlignment: CrossAxisAlignment.start,\n  children: spans.map((span) {\n    return RichText(\n      text: TextSpan(\n        style: interpolatedSpec.textStyle,\n        children: [span],\n      ),\n    );\n  }).toList(),\n)\n```{.code}\n\n@column\n\n![structured_output](https://picsum.photos/800/1400) {.cover}",
    "sections": [
      {
        "blocks": []
      },
      {
        "blocks": [
          {
            "content": "```dart\nColumn(\n  crossAxisAlignment: CrossAxisAlignment.start,\n  children: spans.map((span) {\n    return RichText(\n      text: TextSpan(\n        style: interpolatedSpec.textStyle,\n        children: [span],\n      ),\n    );\n  }).toList(),\n)\n```{.code}",
            "flex": 2,
            "align": "center",
            "scrollable": false,
            "__type": "ContentElement"
          },
          {
            "content": "![structured_output](https://picsum.photos/800/1400) {.cover}",
            "scrollable": false,
            "__type": "ContentElement"
          }
        ],
        "flex": 2
      }
    ],
    "comments": []
  },
  {
    "key": "EfZXNX2z",
    "options": {},
    "markdown": "@column\n\n## Another image{.here}\n\n@column\n\n![structured_output](https://picsum.photos/800/1400) {.cover}",
    "sections": [
      {
        "blocks": [
          {
            "content": "## Another image{.here}",
            "scrollable": false,
            "__type": "ContentElement"
          },
          {
            "content": "![structured_output](https://picsum.photos/800/1400) {.cover}",
            "scrollable": false,
            "__type": "ContentElement"
          }
        ]
      }
    ],
    "comments": []
  },
  {
    "key": "gfFHq6hy",
    "options": {},
    "markdown": "@column\n\n![structured_output](https://picsum.photos/800/1400) {.cover}\n\n@column\n\n## Yes different image{.here}",
    "sections": [
      {
        "blocks": [
          {
            "content": "![structured_output](https://picsum.photos/800/1400) {.cover}",
            "scrollable": false,
            "__type": "ContentElement"
          },
          {
            "content": "## Yes different image{.here}",
            "scrollable": false,
            "__type": "ContentElement"
          }
        ]
      }
    ],
    "comments": []
  },
  {
    "key": "hJocRwhJ",
    "options": {},
    "markdown": "{@column\n    align: center_right\n}\n\n#### Leo Farias\nleoafarias{.here}\n\n\n{@column\n    align: center_left\n}\n\n- Founder/CEO/CTO\n- Open Source Contributor\n- Flutter & Dart GDE\n- Passionate about UI/UX/DX",
    "sections": [
      {
        "blocks": [
          {
            "content": "{@column\n    align: center_right\n}\n\n#### Leo Farias\nleoafarias{.here}\n\n\n{@column\n    align: center_left\n}\n\n- Founder/CEO/CTO\n- Open Source Contributor\n- Flutter & Dart GDE\n- Passionate about UI/UX/DX",
            "scrollable": false,
            "__type": "ContentElement"
          }
        ]
      }
    ],
    "comments": []
  },
  {
    "key": "WMziYGR7",
    "options": {},
    "markdown": "@column\n\n{@column \n  align: center_left \n  flex: 2\n}\n> [!WARNING]  \n> This presentation contains live AI-generated content. Unexpected things may occur during the demonstration. \n\n@column",
    "sections": [
      {
        "blocks": [
          {
            "content": "@column\n\n{@column \n  align: center_left \n  flex: 2\n}\n> [!WARNING]  \n> This presentation contains live AI-generated content. Unexpected things may occur during the demonstration. \n\n@column",
            "scrollable": false,
            "__type": "ContentElement"
          }
        ]
      }
    ],
    "comments": []
  },
  {
    "key": "tNybSglZ",
    "options": {},
    "markdown": "{@column \n  flex: 2 \n  align: center_right\n}\n### Generative UI\n@column\n## VS\n{@column flex: 2}\n### AI Assisted Code Generation",
    "sections": [
      {
        "blocks": [
          {
            "content": "{@column \n  flex: 2 \n  align: center_right\n}\n### Generative UI\n",
            "scrollable": false,
            "__type": "ContentElement"
          },
          {
            "content": "## VS\n{@column flex: 2}\n### AI Assisted Code Generation",
            "scrollable": false,
            "__type": "ContentElement"
          }
        ]
      }
    ],
    "comments": []
  },
  {
    "key": "aTAXFyQ7",
    "options": {},
    "markdown": "### What is Generative UI?{.animate}\n\n@column\n\n- LLMs are great at generating content based on context\n- GUIs are great at providing structured, interactive interfaces for user input and navigation",
    "sections": [
      {
        "blocks": [
          {
            "content": "### What is Generative UI?{.animate}\n\n",
            "scrollable": false,
            "__type": "ContentElement"
          },
          {
            "content": "- LLMs are great at generating content based on context\n- GUIs are great at providing structured, interactive interfaces for user input and navigation",
            "scrollable": false,
            "__type": "ContentElement"
          }
        ]
      }
    ],
    "comments": []
  },
  {
    "key": "9mHDFwa9",
    "options": {},
    "markdown": "# LLM ❤️ GUI{.animate}",
    "sections": [
      {
        "blocks": [
          {
            "content": "# LLM ❤️ GUI{.animate}",
            "scrollable": false,
            "__type": "ContentElement"
          }
        ]
      }
    ],
    "comments": []
  },
  {
    "key": "9BmK4SPw",
    "options": {},
    "markdown": "@column\n@column {\n  flex: 2\n  align: center\n}\nCreates dynamic, context-aware UIs by interpreting actions and maintaining state with LLMs for fluid, interactive responses.{.animate}\n\n@column",
    "sections": [
      {
        "blocks": [
          {
            "content": "",
            "scrollable": false,
            "__type": "ContentElement"
          },
          {
            "content": "Creates dynamic, context-aware UIs by interpreting actions and maintaining state with LLMs for fluid, interactive responses.{.animate}",
            "flex": 2,
            "align": "center",
            "scrollable": false,
            "__type": "ContentElement"
          },
          {
            "content": "",
            "scrollable": false,
            "__type": "ContentElement"
          }
        ]
      }
    ],
    "comments": []
  },
  {
    "key": "3sLdrfsM",
    "options": {},
    "markdown": "### Benefits of UI over Chat{.animate}\n\n- More intuitive and user-friendly, especially for complex tasks\n- Faster feedback loop between users and LLMs\n- Enhances efficiency and interaction",
    "sections": [
      {
        "blocks": [
          {
            "content": "### Benefits of UI over Chat{.animate}\n\n- More intuitive and user-friendly, especially for complex tasks\n- Faster feedback loop between users and LLMs\n- Enhances efficiency and interaction",
            "scrollable": false,
            "__type": "ContentElement"
          }
        ]
      }
    ],
    "comments": []
  },
  {
    "key": "oglBIjM0",
    "options": {},
    "markdown": "@column {\n  flex: 3 \n  align: center\n}\n### Flutter is Well-Suited <br>for Generative UI\nBuilt for any screen: Ideal for generating<br>adaptive UIs across devices and platforms.\n@column",
    "sections": [
      {
        "blocks": [
          {
            "content": "### Flutter is Well-Suited <br>for Generative UI\nBuilt for any screen: Ideal for generating<br>adaptive UIs across devices and platforms.",
            "flex": 3,
            "align": "center",
            "scrollable": false,
            "__type": "ContentElement"
          },
          {
            "content": "",
            "scrollable": false,
            "__type": "ContentElement"
          }
        ]
      }
    ],
    "comments": []
  },
  {
    "key": "Z40wIUYP",
    "options": {},
    "markdown": "## How can LLMs Understtand Your UI?\n\n@column\n![structured_output](assets/structured_output.png)",
    "sections": [
      {
        "blocks": [
          {
            "content": "## How can LLMs Understtand Your UI?\n\n",
            "scrollable": false,
            "__type": "ContentElement"
          },
          {
            "content": "![structured_output](assets/structured_output.png)",
            "scrollable": false,
            "__type": "ContentElement"
          }
        ]
      }
    ],
    "comments": []
  },
  {
    "key": "YAWWIGSR",
    "options": {},
    "markdown": "@column\n\n### Structured Output\n\n@column\n```dart\nfinal schema = Schema.array(\n  description: 'List of recipes',\n  items: Schema.object(\n    properties: {\n      'recipeName': Schema.string(\n        description: 'Name of the recipe.',\n        nullable: false,\n      ),\n    },\n    requiredProperties: ['recipeName'],\n  ),\n);\n```",
    "sections": [
      {
        "blocks": [
          {
            "content": "### Structured Output",
            "scrollable": false,
            "__type": "ContentElement"
          },
          {
            "content": "```dart\nfinal schema = Schema.array(\n  description: 'List of recipes',\n  items: Schema.object(\n    properties: {\n      'recipeName': Schema.string(\n        description: 'Name of the recipe.',\n        nullable: false,\n      ),\n    },\n    requiredProperties: ['recipeName'],\n  ),\n);\n```",
            "scrollable": false,
            "__type": "ContentElement"
          }
        ]
      }
    ],
    "comments": []
  },
  {
    "key": "CwxHOCpO",
    "options": {},
    "markdown": "@section\n```dart\n\nfinal model = GenerativeModel(\n  model: 'gemini-1.5-pro',\n  apiKey: apiKey,\n  generationConfig: GenerationConfig(\n    responseMimeType: 'application/json',\n    responseSchema: schema,\n  ),\n);\n\nfinal prompt = 'List a few popular cookie recipes.';\nfinal response = await model.generateContent([Content.text(prompt)]);\n\n```",
    "sections": [
      {
        "blocks": [
          {
            "content": "```dart\n\nfinal model = GenerativeModel(\n  model: 'gemini-1.5-pro',\n  apiKey: apiKey,\n  generationConfig: GenerationConfig(\n    responseMimeType: 'application/json',\n    responseSchema: schema,\n  ),\n);\n\nfinal prompt = 'List a few popular cookie recipes.';\nfinal response = await model.generateContent([Content.text(prompt)]);\n\n```",
            "scrollable": false,
            "__type": "ContentElement"
          }
        ]
      }
    ],
    "comments": []
  },
  {
    "key": "pukXIjvK",
    "options": {},
    "markdown": "@column\n### Color Palette Generator\n\nGenerate a color palette based on a given text.\n\n- Name of the palette\n- Font family\n- Font color\n- Color for each corner of the palette",
    "sections": [
      {
        "blocks": [
          {
            "content": "### Color Palette Generator\n\nGenerate a color palette based on a given text.\n\n- Name of the palette\n- Font family\n- Font color\n- Color for each corner of the palette",
            "scrollable": false,
            "__type": "ContentElement"
          }
        ]
      }
    ],
    "comments": []
  },
  {
    "key": "14RbmSW5",
    "options": {},
    "markdown": "@column\n```dart\nfinal schema = Schema.object(properties: {\n  'name': Schema.string(\n    description:\n        'The text content to display on color palette. Format: #FF0000',\n    nullable: false,\n  ),\n  'font': Schema.enumString(\n    enumValues: ColorPaletteFontFamily.enumString,\n    description: 'The font to use for the poster text.',\n    nullable: false,\n  ),\n  'fontColor': Schema.string(\n    description: 'The hex color value of the poster text. Format: #FF0000',\n    nullable: false,\n  ),\n  'topLeftColor': Schema.string(\n    description:\n        'The hex color value top left corner of color palette. Format: #FF0000',\n    nullable: false,\n  ),\n  'topRightColor': Schema.string(\n    description:\n        'The hex color value top right corner of color palette. Format: #FF0000',\n    nullable: false,\n  ),\n  'bottomLeftColor': Schema.string(\n    description:\n        'The hex color value bottom left corner of color palette. Format: #FF0000',\n    nullable: false,\n  ),\n  'bottomRightColor': Schema.string(\n    description:\n        'The hex color value bottom right corner of color palette. Format: #FF0000',\n    nullable: false,\n  )\n}, requiredProperties: [\n  'name',\n  'font',\n  'fontColor',\n  'topLeftColor',\n  'topRightColor',\n  'bottomLeftColor',\n  'bottomRightColor',\n]);\n\n```",
    "sections": [
      {
        "blocks": [
          {
            "content": "```dart\nfinal schema = Schema.object(properties: {\n  'name': Schema.string(\n    description:\n        'The text content to display on color palette. Format: #FF0000',\n    nullable: false,\n  ),\n  'font': Schema.enumString(\n    enumValues: ColorPaletteFontFamily.enumString,\n    description: 'The font to use for the poster text.',\n    nullable: false,\n  ),\n  'fontColor': Schema.string(\n    description: 'The hex color value of the poster text. Format: #FF0000',\n    nullable: false,\n  ),\n  'topLeftColor': Schema.string(\n    description:\n        'The hex color value top left corner of color palette. Format: #FF0000',\n    nullable: false,\n  ),\n  'topRightColor': Schema.string(\n    description:\n        'The hex color value top right corner of color palette. Format: #FF0000',\n    nullable: false,\n  ),\n  'bottomLeftColor': Schema.string(\n    description:\n        'The hex color value bottom left corner of color palette. Format: #FF0000',\n    nullable: false,\n  ),\n  'bottomRightColor': Schema.string(\n    description:\n        'The hex color value bottom right corner of color palette. Format: #FF0000',\n    nullable: false,\n  )\n}, requiredProperties: [\n  'name',\n  'font',\n  'fontColor',\n  'topLeftColor',\n  'topRightColor',\n  'bottomLeftColor',\n  'bottomRightColor',\n]);\n\n```",
            "scrollable": false,
            "__type": "ContentElement"
          }
        ]
      }
    ],
    "comments": []
  },
  {
    "key": "fyaXJBlK",
    "options": {
      "style": "demo"
    },
    "markdown": "@colorPalette {\n  schema: true\n  prompts: [tropical, vibrant, pastel, chocolatey pink unicorn, cyberpunk]\n}",
    "sections": [
      {
        "blocks": [
          {
            "content": "@colorPalette {\n  schema: true\n  prompts: [tropical, vibrant, pastel, chocolatey pink unicorn, cyberpunk]\n}",
            "scrollable": false,
            "__type": "ContentElement"
          }
        ]
      }
    ],
    "comments": []
  }
]