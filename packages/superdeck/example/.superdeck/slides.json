{
  "config": {},
  "slides": [
    {
      "key": "Qsp3h0TX",
      "options": {},
      "markdown": "{@section}\n{@section}\n{@column\n  align: center\n}\n# Generative UI{.here}\n# with Flutter\n\n{@column}\n![structured_output](https://picsum.photos/800/1400) {.cover}",
      "sections": [
        {
          "blocks": [],
          "type": "section"
        },
        {
          "blocks": [
            {
              "align": "center",
              "content": "# Generative UI{.here}\n# with Flutter\n",
              "scrollable": false
            },
            {
              "content": "![structured_output](https://picsum.photos/800/1400) {.cover}",
              "scrollable": false
            }
          ],
          "type": "section"
        }
      ],
      "notes": [],
      "assets": [
        {
          "path": ".superdeck/generated/image_caching_lNEW6843.jpeg",
          "width": 800,
          "height": 1400,
          "reference": "https://picsum.photos/800/1400"
        }
      ]
    },
    {
      "key": "DUv12f5a",
      "options": {},
      "markdown": "{@column}\n\n## How can LLMs Understtand Your UI? {.here}\n\n{@column}\n\n![structured_output](https://picsum.photos/800/300) {.cover}",
      "sections": [
        {
          "blocks": [
            {
              "content": "## How can LLMs Understtand Your UI? {.here}\n",
              "scrollable": false
            },
            {
              "content": "![structured_output](https://picsum.photos/800/300) {.cover}",
              "scrollable": false
            }
          ],
          "type": "section"
        }
      ],
      "notes": [],
      "assets": [
        {
          "path": ".superdeck/generated/image_caching_xWpKxOmA.jpeg",
          "width": 800,
          "height": 300,
          "reference": "https://picsum.photos/800/300"
        }
      ]
    },
    {
      "key": "UKTp7eAH",
      "options": {},
      "markdown": "{@column}\n\n![structured_output](https://picsum.photos/800/1400) {.cover}\n\n{@column}\n## Another image{.here}",
      "sections": [
        {
          "blocks": [
            {
              "content": "![structured_output](https://picsum.photos/800/1400) {.cover}\n",
              "scrollable": false
            },
            {
              "content": "## Another image{.here}",
              "scrollable": false
            }
          ],
          "type": "section"
        }
      ],
      "notes": [],
      "assets": [
        {
          "path": ".superdeck/generated/image_caching_lNEW6843.jpeg",
          "width": 800,
          "height": 1400,
          "reference": "https://picsum.photos/800/1400"
        }
      ]
    },
    {
      "key": "P6nguqAy",
      "options": {},
      "markdown": "{@column\n    align: center_right\n}\n\n#### Leo Farias\n@leoafarias{.here}\n\n\n{@column\n    align: center_left\n}\n\n- Founder/CEO/CTO\n- Open Source Contributor\n- Flutter & Dart GDE\n- Passionate about UI/UX/DX",
      "sections": [
        {
          "blocks": [
            {
              "align": "center_right",
              "content": "#### Leo Farias\n@leoafarias{.here}\n\n",
              "scrollable": false
            },
            {
              "align": "center_left",
              "content": "- Founder/CEO/CTO\n- Open Source Contributor\n- Flutter & Dart GDE\n- Passionate about UI/UX/DX",
              "scrollable": false
            }
          ],
          "type": "section"
        }
      ],
      "notes": [],
      "assets": []
    },
    {
      "key": "htEZFxsa",
      "options": {},
      "markdown": "{@column}\n\n{@column \n  align: center_left \n  flex: 2\n}\n> [!WARNING]  \n> This presentation contains live AI-generated content. Unexpected things may occur during the demonstration. \n\n{@column}",
      "sections": [
        {
          "blocks": [
            {
              "content": "",
              "scrollable": false
            },
            {
              "flex": 2,
              "align": "center_left",
              "content": "> [!WARNING]  \n> This presentation contains live AI-generated content. Unexpected things may occur during the demonstration. \n",
              "scrollable": false
            },
            {
              "scrollable": false
            }
          ],
          "type": "section"
        }
      ],
      "notes": [],
      "assets": []
    },
    {
      "key": "D4etKl0J",
      "options": {},
      "markdown": "{@column \n  flex: 2 \n  align: center_right\n}\n### Generative UI\n{@column}\n## VS\n{@column flex: 2}\n### AI Assisted Code Generation",
      "sections": [
        {
          "blocks": [
            {
              "flex": 2,
              "align": "center_right",
              "content": "### Generative UI",
              "scrollable": false
            },
            {
              "content": "## VS",
              "scrollable": false
            },
            {
              "flex": 2,
              "content": "### AI Assisted Code Generation",
              "scrollable": false
            }
          ],
          "type": "section"
        }
      ],
      "notes": [],
      "assets": []
    },
    {
      "key": "A8nJ3H8k",
      "options": {},
      "markdown": "### What is Generative UI?{.animate}\n\n{@column}\n\n- LLMs are great at generating content based on context\n- GUIs are great at providing structured, interactive interfaces for user input and navigation",
      "sections": [
        {
          "blocks": [
            {
              "content": "### What is Generative UI?{.animate}\n",
              "scrollable": false
            },
            {
              "content": "- LLMs are great at generating content based on context\n- GUIs are great at providing structured, interactive interfaces for user input and navigation",
              "scrollable": false
            }
          ],
          "type": "section"
        }
      ],
      "notes": [],
      "assets": []
    },
    {
      "key": "9mHDFwa9",
      "options": {},
      "markdown": "# LLM ❤️ GUI{.animate}",
      "sections": [
        {
          "blocks": [
            {
              "content": "# LLM ❤️ GUI{.animate}",
              "scrollable": false
            }
          ],
          "type": "section"
        }
      ],
      "notes": [],
      "assets": []
    },
    {
      "key": "bsXHyPoa",
      "options": {},
      "markdown": "{@column}\n{@column\n  flex: 2\n  align: center\n}\nCreates dynamic, context-aware UIs by interpreting actions and maintaining state with LLMs for fluid, interactive responses.{.animate}\n\n{@column}",
      "sections": [
        {
          "blocks": [
            {
              "scrollable": false
            },
            {
              "flex": 2,
              "align": "center",
              "content": "Creates dynamic, context-aware UIs by interpreting actions and maintaining state with LLMs for fluid, interactive responses.{.animate}\n",
              "scrollable": false
            },
            {
              "scrollable": false
            }
          ],
          "type": "section"
        }
      ],
      "notes": [],
      "assets": []
    },
    {
      "key": "3sLdrfsM",
      "options": {},
      "markdown": "### Benefits of UI over Chat{.animate}\n\n- More intuitive and user-friendly, especially for complex tasks\n- Faster feedback loop between users and LLMs\n- Enhances efficiency and interaction",
      "sections": [
        {
          "blocks": [
            {
              "content": "### Benefits of UI over Chat{.animate}\n\n- More intuitive and user-friendly, especially for complex tasks\n- Faster feedback loop between users and LLMs\n- Enhances efficiency and interaction",
              "scrollable": false
            }
          ],
          "type": "section"
        }
      ],
      "notes": [],
      "assets": []
    },
    {
      "key": "CsyEcFYH",
      "options": {},
      "markdown": "{@column\n  flex: 3 \n  align: center\n}\n### Flutter is Well-Suited <br>for Generative UI\nBuilt for any screen: Ideal for generating<br>adaptive UIs across devices and platforms.\n{@column}",
      "sections": [
        {
          "blocks": [
            {
              "flex": 3,
              "align": "center",
              "content": "### Flutter is Well-Suited <br>for Generative UI\nBuilt for any screen: Ideal for generating<br>adaptive UIs across devices and platforms.",
              "scrollable": false
            },
            {
              "scrollable": false
            }
          ],
          "type": "section"
        }
      ],
      "notes": [],
      "assets": []
    },
    {
      "key": "rHHS9FIs",
      "options": {},
      "markdown": "## How can LLMs Understtand Your UI?\n\n{@colum}\n![structured_output](assets/structured_output.png)",
      "sections": [
        {
          "blocks": [
            {
              "content": "## How can LLMs Understtand Your UI?\n",
              "scrollable": false
            },
            {
              "name": "colum",
              "scrollable": false,
              "type": "widget"
            },
            {
              "content": "![structured_output](assets/structured_output.png)",
              "scrollable": false
            }
          ],
          "type": "section"
        }
      ],
      "notes": [],
      "assets": [
        {
          "path": "assets/structured_output.png",
          "width": 2038,
          "height": 2340,
          "reference": "assets/structured_output.png"
        }
      ]
    },
    {
      "key": "9jtc9i8W",
      "options": {},
      "markdown": "{@column}\n\n### Structured Output\n\n{@column}\n```dart\nfinal schema = Schema.array(\n  description: 'List of recipes',\n  items: Schema.object(\n    properties: {\n      'recipeName': Schema.string(\n        description: 'Name of the recipe.',\n        nullable: false,\n      ),\n    },\n    requiredProperties: ['recipeName'],\n  ),\n);\n```",
      "sections": [
        {
          "blocks": [
            {
              "content": "### Structured Output\n",
              "scrollable": false
            },
            {
              "content": "```dart\nfinal schema = Schema.array(\n  description: 'List of recipes',\n  items: Schema.object(\n    properties: {\n      'recipeName': Schema.string(\n        description: 'Name of the recipe.',\n        nullable: false,\n      ),\n    },\n    requiredProperties: ['recipeName'],\n  ),\n);\n```",
              "scrollable": false
            }
          ],
          "type": "section"
        }
      ],
      "notes": [],
      "assets": []
    },
    {
      "key": "CtLOsx2s",
      "options": {},
      "markdown": "{@section}\n```dart\n\nfinal model = GenerativeModel(\n  model: 'gemini-1.5-pro',\n  apiKey: apiKey,\n  generationConfig: GenerationConfig(\n    responseMimeType: 'application/json',\n    responseSchema: schema,\n  ),\n);\n\nfinal prompt = 'List a few popular cookie recipes.';\nfinal response = await model.generateContent([Content.text(prompt)]);\n\n```",
      "sections": [
        {
          "blocks": [
            {
              "content": "```dart\n\nfinal model = GenerativeModel(\n  model: 'gemini-1.5-pro',\n  apiKey: apiKey,\n  generationConfig: GenerationConfig(\n    responseMimeType: 'application/json',\n    responseSchema: schema,\n  ),\n);\n\nfinal prompt = 'List a few popular cookie recipes.';\nfinal response = await model.generateContent([Content.text(prompt)]);\n\n```",
              "scrollable": false
            }
          ],
          "type": "section"
        }
      ],
      "notes": [],
      "assets": []
    },
    {
      "key": "6EU2Xxrf",
      "options": {},
      "markdown": "{@column}\n### Color Palette Generator\n\nGenerate a color palette based on a given text.\n\n- Name of the palette\n- Font family\n- Font color\n- Color for each corner of the palette",
      "sections": [
        {
          "blocks": [
            {
              "content": "### Color Palette Generator\n\nGenerate a color palette based on a given text.\n\n- Name of the palette\n- Font family\n- Font color\n- Color for each corner of the palette",
              "scrollable": false
            }
          ],
          "type": "section"
        }
      ],
      "notes": [],
      "assets": []
    },
    {
      "key": "qek7UrZY",
      "options": {},
      "markdown": "{@column}\n```dart\nfinal schema = Schema.object(properties: {\n  'name': Schema.string(\n    description:\n        'The text content to display on color palette. Format: #FF0000',\n    nullable: false,\n  ),\n  'font': Schema.enumString(\n    enumValues: ColorPaletteFontFamily.enumString,\n    description: 'The font to use for the poster text.',\n    nullable: false,\n  ),\n  'fontColor': Schema.string(\n    description: 'The hex color value of the poster text. Format: #FF0000',\n    nullable: false,\n  ),\n  'topLeftColor': Schema.string(\n    description:\n        'The hex color value top left corner of color palette. Format: #FF0000',\n    nullable: false,\n  ),\n  'topRightColor': Schema.string(\n    description:\n        'The hex color value top right corner of color palette. Format: #FF0000',\n    nullable: false,\n  ),\n  'bottomLeftColor': Schema.string(\n    description:\n        'The hex color value bottom left corner of color palette. Format: #FF0000',\n    nullable: false,\n  ),\n  'bottomRightColor': Schema.string(\n    description:\n        'The hex color value bottom right corner of color palette. Format: #FF0000',\n    nullable: false,\n  )\n}, requiredProperties: [\n  'name',\n  'font',\n  'fontColor',\n  'topLeftColor',\n  'topRightColor',\n  'bottomLeftColor',\n  'bottomRightColor',\n]);\n\n```",
      "sections": [
        {
          "blocks": [
            {
              "content": "```dart\nfinal schema = Schema.object(properties: {\n  'name': Schema.string(\n    description:\n        'The text content to display on color palette. Format: #FF0000',\n    nullable: false,\n  ),\n  'font': Schema.enumString(\n    enumValues: ColorPaletteFontFamily.enumString,\n    description: 'The font to use for the poster text.',\n    nullable: false,\n  ),\n  'fontColor': Schema.string(\n    description: 'The hex color value of the poster text. Format: #FF0000',\n    nullable: false,\n  ),\n  'topLeftColor': Schema.string(\n    description:\n        'The hex color value top left corner of color palette. Format: #FF0000',\n    nullable: false,\n  ),\n  'topRightColor': Schema.string(\n    description:\n        'The hex color value top right corner of color palette. Format: #FF0000',\n    nullable: false,\n  ),\n  'bottomLeftColor': Schema.string(\n    description:\n        'The hex color value bottom left corner of color palette. Format: #FF0000',\n    nullable: false,\n  ),\n  'bottomRightColor': Schema.string(\n    description:\n        'The hex color value bottom right corner of color palette. Format: #FF0000',\n    nullable: false,\n  )\n}, requiredProperties: [\n  'name',\n  'font',\n  'fontColor',\n  'topLeftColor',\n  'topRightColor',\n  'bottomLeftColor',\n  'bottomRightColor',\n]);\n\n```",
              "scrollable": false
            }
          ],
          "type": "section"
        }
      ],
      "notes": [],
      "assets": []
    },
    {
      "key": "8DDlBdti",
      "options": {
        "style": "demo"
      },
      "markdown": "{@colorPalette\n  type: schema\n  prompts:\n    - tropical\n    - vibrant\n    - pastel\n    - chocolatey pink unicorn\n    - cyberpunk\n}",
      "sections": [
        {
          "blocks": [
            {
              "name": "colorPalette",
              "scrollable": false,
              "type": "schema",
              "prompts": [
                "tropical",
                "vibrant",
                "pastel",
                "chocolatey pink unicorn",
                "cyberpunk"
              ]
            }
          ],
          "type": "section"
        }
      ],
      "notes": [],
      "assets": []
    },
    {
      "key": "m7QWZujG",
      "options": {
        "style": "demo"
      },
      "markdown": "{@colorPalette\n  type: widget\n  prompts:\n    - tropical\n    - vibrant\n    - pastel\n    - chocolatey pink unicorn\n    - cyberpunk\n}",
      "sections": [
        {
          "blocks": [
            {
              "name": "colorPalette",
              "scrollable": false,
              "type": "widget",
              "prompts": [
                "tropical",
                "vibrant",
                "pastel",
                "chocolatey pink unicorn",
                "cyberpunk"
              ]
            }
          ],
          "type": "section"
        }
      ],
      "notes": [],
      "assets": []
    },
    {
      "key": "H0jUl8Aj",
      "options": {},
      "markdown": "## LLMs Orchestrate APIs",
      "sections": [
        {
          "blocks": [
            {
              "content": "## LLMs Orchestrate APIs",
              "scrollable": false
            }
          ],
          "type": "section"
        }
      ],
      "notes": [],
      "assets": []
    },
    {
      "key": "rQjAc48l",
      "options": {},
      "markdown": "{@section \n  align: center_right\n} \n\n### Gemini Function Calling\nThe Function Calling feature is in Beta release\n\n\n\n![llm tools](assets/llm_tools.png)",
      "sections": [
        {
          "blocks": [
            {
              "content": "### Gemini Function Calling\nThe Function Calling feature is in Beta release\n\n\n\n![llm tools](assets/llm_tools.png)",
              "scrollable": false
            }
          ],
          "align": "center_right",
          "type": "section"
        }
      ],
      "notes": [],
      "assets": [
        {
          "path": "assets/llm_tools.png",
          "width": 3776,
          "height": 1480,
          "reference": "assets/llm_tools.png"
        }
      ]
    },
    {
      "key": "85oPyLzH",
      "options": {
        "style": "demo"
      },
      "markdown": "{@lightControl \n  type: schema\n  prompts:\n    - Dim the lights by 20\n    - Increase by 35\n    - Turn off the lights\n    - Set it to 80\n    - Lower by half\n    - Max brightness\n}",
      "sections": [
        {
          "blocks": [
            {
              "name": "lightControl",
              "scrollable": false,
              "type": "schema",
              "prompts": [
                "Dim the lights by 20",
                "Increase by 35",
                "Turn off the lights",
                "Set it to 80",
                "Lower by half",
                "Max brightness"
              ]
            }
          ],
          "type": "section"
        }
      ],
      "notes": [],
      "assets": []
    },
    {
      "key": "Zn801w4G",
      "options": {},
      "markdown": "{@column \n  align: bottom_right\n  flex: 2\n}\n\n### User Interaction{.heading}\nNatural Language way to interact with an LLM\n\n{@column\n  flex: 4\n}\n![llm response](assets/llm_interaction.png)",
      "sections": [
        {
          "blocks": [
            {
              "flex": 2,
              "align": "bottom_right",
              "content": "### User Interaction{.heading}\nNatural Language way to interact with an LLM\n",
              "scrollable": false
            },
            {
              "flex": 4,
              "content": "![llm response](assets/llm_interaction.png)",
              "scrollable": false
            }
          ],
          "type": "section"
        }
      ],
      "notes": [],
      "assets": [
        {
          "path": "assets/llm_interaction.png",
          "width": 2900,
          "height": 1396,
          "reference": "assets/llm_interaction.png"
        }
      ]
    },
    {
      "key": "aY8Y9HBu",
      "options": {},
      "markdown": "{@column\n  align: center_left\n}\n### Widget Response{.heading}\n\n{@column \n  flex: 3\n}\n![widget_response](assets/widget_response.png)",
      "sections": [
        {
          "blocks": [
            {
              "align": "center_left",
              "content": "### Widget Response{.heading}\n",
              "scrollable": false
            },
            {
              "flex": 3,
              "content": "![widget_response](assets/widget_response.png)",
              "scrollable": false
            }
          ],
          "type": "section"
        }
      ],
      "notes": [],
      "assets": [
        {
          "path": "assets/widget_response.png",
          "width": 3142,
          "height": 2460,
          "reference": "assets/widget_response.png"
        }
      ]
    },
    {
      "key": "3eFdrtdl",
      "options": {
        "style": "demo"
      },
      "markdown": "{@lightControl\n  type: widget\n  prompts:\n    - Dim the lights by 20\n    - Increase by 35\n    - Turn off the lights\n    - Set it to 80\n    - Lower by half\n    - Max brightness\n}",
      "sections": [
        {
          "blocks": [
            {
              "name": "lightControl",
              "scrollable": false,
              "type": "widget",
              "prompts": [
                "Dim the lights by 20",
                "Increase by 35",
                "Turn off the lights",
                "Set it to 80",
                "Lower by half",
                "Max brightness"
              ]
            }
          ],
          "type": "section"
        }
      ],
      "notes": [],
      "assets": []
    },
    {
      "key": "pNxPyfLK",
      "options": {},
      "markdown": "## What if the tool to use is a widget schema?",
      "sections": [
        {
          "blocks": [
            {
              "content": "## What if the tool to use is a widget schema?",
              "scrollable": false
            }
          ],
          "type": "section"
        }
      ],
      "notes": [],
      "assets": []
    },
    {
      "key": "5cGNbsJx",
      "options": {},
      "markdown": "### Experimental\n\n```dart\nfinal schema = Schema.object(properties: {\n  'textFields': Schema.array(\n    description: 'A list of text fields',\n    items: TextFieldSchemaDto.schema,\n    nullable: true,\n  ),\n  'dropdowns': Schema.array(\n    description: 'A list of dropdowns',\n    items: DropdownSchemaDto.schema,\n    nullable: true,\n  ),\n  'colorPickers': Schema.array(\n    description: 'A list of colors pickers',\n    items: ColorPickerDtoSchema.schema,\n    nullable: true,\n  ),\n});\n\n```",
      "sections": [
        {
          "blocks": [
            {
              "content": "### Experimental\n\n```dart\nfinal schema = Schema.object(properties: {\n  'textFields': Schema.array(\n    description: 'A list of text fields',\n    items: TextFieldSchemaDto.schema,\n    nullable: true,\n  ),\n  'dropdowns': Schema.array(\n    description: 'A list of dropdowns',\n    items: DropdownSchemaDto.schema,\n    nullable: true,\n  ),\n  'colorPickers': Schema.array(\n    description: 'A list of colors pickers',\n    items: ColorPickerDtoSchema.schema,\n    nullable: true,\n  ),\n});\n\n```",
              "scrollable": false
            }
          ],
          "type": "section"
        }
      ],
      "notes": [],
      "assets": []
    },
    {
      "key": "J6DNhZau",
      "options": {
        "style": "demo"
      },
      "markdown": "{@widgetSchema\n  type: widget\n  prompts:\n    - Change top colors\n    - Change font\n    - Change all colors\n    - Change everything\n}",
      "sections": [
        {
          "blocks": [
            {
              "name": "widgetSchema",
              "scrollable": false,
              "type": "widget",
              "prompts": [
                "Change top colors",
                "Change font",
                "Change all colors",
                "Change everything"
              ]
            }
          ],
          "type": "section"
        }
      ],
      "notes": [],
      "assets": []
    },
    {
      "key": "3kW1wOHd",
      "options": {},
      "markdown": "## The future of UI might be orchestrating user experiences rather than creating it.",
      "sections": [
        {
          "blocks": [
            {
              "content": "## The future of UI might be orchestrating user experiences rather than creating it.",
              "scrollable": false
            }
          ],
          "type": "section"
        }
      ],
      "notes": [],
      "assets": []
    },
    {
      "key": "UqCN11cB",
      "options": {},
      "markdown": "### Thank you\n\nLeo Farias\n@leoafarias\n(GitHub, Twitter/X)",
      "sections": [
        {
          "blocks": [
            {
              "content": "### Thank you\n\nLeo Farias\n@leoafarias\n(GitHub, Twitter/X)",
              "scrollable": false
            }
          ],
          "type": "section"
        }
      ],
      "notes": [],
      "assets": []
    }
  ]
}