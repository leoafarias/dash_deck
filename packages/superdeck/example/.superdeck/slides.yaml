config: {}
slides: 
  - key: 'w2wlREdN'
    options: {}
    markdown: |-
      {@column}
      
      ## Another image Another image Another image Another image Another image Another image Another image Another image Another image Another image {.here}
      
      {@column}
      
      
      
      ```mermaid
      graph TD
          A[Start] --> B[Input]
          B --> C[Process]
          C --> D[Output]
          D --> E[End]
      ``` {.code}
    sections: 
      - blocks: 
          - content: |
              ## Another image Another image Another image Another image Another image Another image Another image Another image Another image Another image {.here}
            scrollable: false
          - content: |-
              ```mermaid
              graph TD
                  A[Start] --> B[Input]
                  B --> C[Process]
                  C --> D[Output]
                  D --> E[End]
              ``` {.code}
            scrollable: false
        type: 'section'
    notes: []
    assets: 
      - path: '.superdeck/generated/mermaid_wgsvOvJJ.png'
        width: 168
        height: 768
  - key: '4OPpCLpy'
    options: {}
    markdown: |-
      {@section}
      {@section flex: 2}
      {@column
        align: center
        flex: 2
      }
      
      
      ```dart
      Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: spans.map((span) {
          return RichText(
            text: TextSpan(
              style: interpolatedSpec.textStyle,
              children: [span],
            ),
          );
        }).toList(),
      )
      ```{.code}
      
      {@column}
      
      ![structured_output](https://picsum.photos/800/1400) {.cover}
    sections: 
      - blocks: []
        type: 'section'
      - blocks: 
          - flex: 2
            align: 'center'
            content: |
              ```dart
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: spans.map((span) {
                  return RichText(
                    text: TextSpan(
                      style: interpolatedSpec.textStyle,
                      children: [span],
                    ),
                  );
                }).toList(),
              )
              ```{.code}
            scrollable: false
          - content: '![structured_output](https://picsum.photos/800/1400) {.cover}'
            scrollable: false
        flex: 2
        type: 'section'
    notes: []
    assets: []
  - key: 'rPTQlMdP'
    options: {}
    markdown: |-
      {@column}
      
      ## Another image{.here}
      
      {@column}
      
      ![structured_output](https://picsum.photos/800/1400) {.cover}
    sections: 
      - blocks: 
          - content: |
              ## Another image{.here}
            scrollable: false
          - content: '![structured_output](https://picsum.photos/800/1400) {.cover}'
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: 'ECisD4gC'
    options: {}
    markdown: |-
      {@column}
      
      ![structured_output](https://picsum.photos/800/1400) {.cover}
      
      {@column}
      
      ## Another image{.here}
    sections: 
      - blocks: 
          - content: |
              ![structured_output](https://picsum.photos/800/1400) {.cover}
            scrollable: false
          - content: '## Another image{.here}'
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: 'P6nguqAy'
    options: {}
    markdown: |-
      {@column
          align: center_right
      }
      
      #### Leo Farias
      @leoafarias{.here}
      
      
      {@column
          align: center_left
      }
      
      - Founder/CEO/CTO
      - Open Source Contributor
      - Flutter & Dart GDE
      - Passionate about UI/UX/DX
    sections: 
      - blocks: 
          - align: 'center_right'
            content: |
              #### Leo Farias
              @leoafarias{.here}
              
            scrollable: false
          - align: 'center_left'
            content: |-
              - Founder/CEO/CTO
              - Open Source Contributor
              - Flutter & Dart GDE
              - Passionate about UI/UX/DX
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: 'htEZFxsa'
    options: {}
    markdown: |-
      {@column}
      
      {@column 
        align: center_left 
        flex: 2
      }
      > [!WARNING]  
      > This presentation contains live AI-generated content. Unexpected things may occur during the demonstration. 
      
      {@column}
    sections: 
      - blocks: 
          - content: ''
            scrollable: false
          - flex: 2
            align: 'center_left'
            content: |
              > [!WARNING]  
              > This presentation contains live AI-generated content. Unexpected things may occur during the demonstration. 
            scrollable: false
          - scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: 'D4etKl0J'
    options: {}
    markdown: |-
      {@column 
        flex: 2 
        align: center_right
      }
      ### Generative UI
      {@column}
      ## VS
      {@column flex: 2}
      ### AI Assisted Code Generation
    sections: 
      - blocks: 
          - flex: 2
            align: 'center_right'
            content: '### Generative UI'
            scrollable: false
          - content: '## VS'
            scrollable: false
          - flex: 2
            content: '### AI Assisted Code Generation'
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: 'A8nJ3H8k'
    options: {}
    markdown: |-
      ### What is Generative UI?{.animate}
      
      {@column}
      
      - LLMs are great at generating content based on context
      - GUIs are great at providing structured, interactive interfaces for user input and navigation
    sections: 
      - blocks: 
          - content: |
              ### What is Generative UI?{.animate}
            scrollable: false
          - content: |-
              - LLMs are great at generating content based on context
              - GUIs are great at providing structured, interactive interfaces for user input and navigation
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: '9mHDFwa9'
    options: {}
    markdown: '# LLM ❤️ GUI{.animate}'
    sections: 
      - blocks: 
          - content: '# LLM ❤️ GUI{.animate}'
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: 'bsXHyPoa'
    options: {}
    markdown: |-
      {@column}
      {@column
        flex: 2
        align: center
      }
      Creates dynamic, context-aware UIs by interpreting actions and maintaining state with LLMs for fluid, interactive responses.{.animate}
      
      {@column}
    sections: 
      - blocks: 
          - scrollable: false
          - flex: 2
            align: 'center'
            content: |
              Creates dynamic, context-aware UIs by interpreting actions and maintaining state with LLMs for fluid, interactive responses.{.animate}
            scrollable: false
          - scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: '3sLdrfsM'
    options: {}
    markdown: |-
      ### Benefits of UI over Chat{.animate}
      
      - More intuitive and user-friendly, especially for complex tasks
      - Faster feedback loop between users and LLMs
      - Enhances efficiency and interaction
    sections: 
      - blocks: 
          - content: |-
              ### Benefits of UI over Chat{.animate}
              
              - More intuitive and user-friendly, especially for complex tasks
              - Faster feedback loop between users and LLMs
              - Enhances efficiency and interaction
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: 'CsyEcFYH'
    options: {}
    markdown: |-
      {@column
        flex: 3 
        align: center
      }
      ### Flutter is Well-Suited <br>for Generative UI
      Built for any screen: Ideal for generating<br>adaptive UIs across devices and platforms.
      {@column}
    sections: 
      - blocks: 
          - flex: 3
            align: 'center'
            content: |-
              ### Flutter is Well-Suited <br>for Generative UI
              Built for any screen: Ideal for generating<br>adaptive UIs across devices and platforms.
            scrollable: false
          - scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: 'rHHS9FIs'
    options: {}
    markdown: |-
      ## How can LLMs Understtand Your UI?
      
      {@colum}
      ![structured_output](assets/structured_output.png)
    sections: 
      - blocks: 
          - content: |
              ## How can LLMs Understtand Your UI?
            scrollable: false
          - name: 'colum'
            scrollable: false
            type: 'widget'
          - content: '![structured_output](assets/structured_output.png)'
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: '9jtc9i8W'
    options: {}
    markdown: |-
      {@column}
      
      ### Structured Output
      
      {@column}
      ```dart
      final schema = Schema.array(
        description: 'List of recipes',
        items: Schema.object(
          properties: {
            'recipeName': Schema.string(
              description: 'Name of the recipe.',
              nullable: false,
            ),
          },
          requiredProperties: ['recipeName'],
        ),
      );
      ```
    sections: 
      - blocks: 
          - content: |
              ### Structured Output
            scrollable: false
          - content: |-
              ```dart
              final schema = Schema.array(
                description: 'List of recipes',
                items: Schema.object(
                  properties: {
                    'recipeName': Schema.string(
                      description: 'Name of the recipe.',
                      nullable: false,
                    ),
                  },
                  requiredProperties: ['recipeName'],
                ),
              );
              ```
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: 'CtLOsx2s'
    options: {}
    markdown: |-
      {@section}
      ```dart
      
      final model = GenerativeModel(
        model: 'gemini-1.5-pro',
        apiKey: apiKey,
        generationConfig: GenerationConfig(
          responseMimeType: 'application/json',
          responseSchema: schema,
        ),
      );
      
      final prompt = 'List a few popular cookie recipes.';
      final response = await model.generateContent([Content.text(prompt)]);
      
      ```
    sections: 
      - blocks: 
          - content: |-
              ```dart
              
              final model = GenerativeModel(
                model: 'gemini-1.5-pro',
                apiKey: apiKey,
                generationConfig: GenerationConfig(
                  responseMimeType: 'application/json',
                  responseSchema: schema,
                ),
              );
              
              final prompt = 'List a few popular cookie recipes.';
              final response = await model.generateContent([Content.text(prompt)]);
              
              ```
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: '6EU2Xxrf'
    options: {}
    markdown: |-
      {@column}
      ### Color Palette Generator
      
      Generate a color palette based on a given text.
      
      - Name of the palette
      - Font family
      - Font color
      - Color for each corner of the palette
    sections: 
      - blocks: 
          - content: |-
              ### Color Palette Generator
              
              Generate a color palette based on a given text.
              
              - Name of the palette
              - Font family
              - Font color
              - Color for each corner of the palette
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: 'qek7UrZY'
    options: {}
    markdown: |-
      {@column}
      ```dart
      final schema = Schema.object(properties: {
        'name': Schema.string(
          description:
              'The text content to display on color palette. Format: #FF0000',
          nullable: false,
        ),
        'font': Schema.enumString(
          enumValues: ColorPaletteFontFamily.enumString,
          description: 'The font to use for the poster text.',
          nullable: false,
        ),
        'fontColor': Schema.string(
          description: 'The hex color value of the poster text. Format: #FF0000',
          nullable: false,
        ),
        'topLeftColor': Schema.string(
          description:
              'The hex color value top left corner of color palette. Format: #FF0000',
          nullable: false,
        ),
        'topRightColor': Schema.string(
          description:
              'The hex color value top right corner of color palette. Format: #FF0000',
          nullable: false,
        ),
        'bottomLeftColor': Schema.string(
          description:
              'The hex color value bottom left corner of color palette. Format: #FF0000',
          nullable: false,
        ),
        'bottomRightColor': Schema.string(
          description:
              'The hex color value bottom right corner of color palette. Format: #FF0000',
          nullable: false,
        )
      }, requiredProperties: [
        'name',
        'font',
        'fontColor',
        'topLeftColor',
        'topRightColor',
        'bottomLeftColor',
        'bottomRightColor',
      ]);
      
      ```
    sections: 
      - blocks: 
          - content: |-
              ```dart
              final schema = Schema.object(properties: {
                'name': Schema.string(
                  description:
                      'The text content to display on color palette. Format: #FF0000',
                  nullable: false,
                ),
                'font': Schema.enumString(
                  enumValues: ColorPaletteFontFamily.enumString,
                  description: 'The font to use for the poster text.',
                  nullable: false,
                ),
                'fontColor': Schema.string(
                  description: 'The hex color value of the poster text. Format: #FF0000',
                  nullable: false,
                ),
                'topLeftColor': Schema.string(
                  description:
                      'The hex color value top left corner of color palette. Format: #FF0000',
                  nullable: false,
                ),
                'topRightColor': Schema.string(
                  description:
                      'The hex color value top right corner of color palette. Format: #FF0000',
                  nullable: false,
                ),
                'bottomLeftColor': Schema.string(
                  description:
                      'The hex color value bottom left corner of color palette. Format: #FF0000',
                  nullable: false,
                ),
                'bottomRightColor': Schema.string(
                  description:
                      'The hex color value bottom right corner of color palette. Format: #FF0000',
                  nullable: false,
                )
              }, requiredProperties: [
                'name',
                'font',
                'fontColor',
                'topLeftColor',
                'topRightColor',
                'bottomLeftColor',
                'bottomRightColor',
              ]);
              
              ```
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: '8DDlBdti'
    options: 
      style: 'demo'
    markdown: |-
      {@colorPalette
        type: schema
        prompts:
          - tropical
          - vibrant
          - pastel
          - chocolatey pink unicorn
          - cyberpunk
      }
    sections: 
      - blocks: 
          - name: 'colorPalette'
            scrollable: false
            type: 'schema'
            prompts: 
              - 'tropical'
              - 'vibrant'
              - 'pastel'
              - 'chocolatey pink unicorn'
              - 'cyberpunk'
        type: 'section'
    notes: []
    assets: []
  - key: 'm7QWZujG'
    options: 
      style: 'demo'
    markdown: |-
      {@colorPalette
        type: widget
        prompts:
          - tropical
          - vibrant
          - pastel
          - chocolatey pink unicorn
          - cyberpunk
      }
    sections: 
      - blocks: 
          - name: 'colorPalette'
            scrollable: false
            type: 'widget'
            prompts: 
              - 'tropical'
              - 'vibrant'
              - 'pastel'
              - 'chocolatey pink unicorn'
              - 'cyberpunk'
        type: 'section'
    notes: []
    assets: []
  - key: 'H0jUl8Aj'
    options: {}
    markdown: '## LLMs Orchestrate APIs'
    sections: 
      - blocks: 
          - content: '## LLMs Orchestrate APIs'
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: 'rQjAc48l'
    options: {}
    markdown: |-
      {@section 
        align: center_right
      } 
      
      ### Gemini Function Calling
      The Function Calling feature is in Beta release
      
      
      
      ![llm tools](assets/llm_tools.png)
    sections: 
      - blocks: 
          - content: |-
              ### Gemini Function Calling
              The Function Calling feature is in Beta release
              
              
              
              ![llm tools](assets/llm_tools.png)
            scrollable: false
        align: 'center_right'
        type: 'section'
    notes: []
    assets: []
  - key: '85oPyLzH'
    options: 
      style: 'demo'
    markdown: |-
      {@lightControl 
        type: schema
        prompts:
          - Dim the lights by 20
          - Increase by 35
          - Turn off the lights
          - Set it to 80
          - Lower by half
          - Max brightness
      }
    sections: 
      - blocks: 
          - name: 'lightControl'
            scrollable: false
            type: 'schema'
            prompts: 
              - 'Dim the lights by 20'
              - 'Increase by 35'
              - 'Turn off the lights'
              - 'Set it to 80'
              - 'Lower by half'
              - 'Max brightness'
        type: 'section'
    notes: []
    assets: []
  - key: 'Zn801w4G'
    options: {}
    markdown: |-
      {@column 
        align: bottom_right
        flex: 2
      }
      
      ### User Interaction{.heading}
      Natural Language way to interact with an LLM
      
      {@column
        flex: 4
      }
      ![llm response](assets/llm_interaction.png)
    sections: 
      - blocks: 
          - flex: 2
            align: 'bottom_right'
            content: |
              ### User Interaction{.heading}
              Natural Language way to interact with an LLM
            scrollable: false
          - flex: 4
            content: '![llm response](assets/llm_interaction.png)'
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: 'aY8Y9HBu'
    options: {}
    markdown: |-
      {@column
        align: center_left
      }
      ### Widget Response{.heading}
      
      {@column 
        flex: 3
      }
      ![widget_response](assets/widget_response.png)
    sections: 
      - blocks: 
          - align: 'center_left'
            content: |
              ### Widget Response{.heading}
            scrollable: false
          - flex: 3
            content: '![widget_response](assets/widget_response.png)'
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: '3eFdrtdl'
    options: 
      style: 'demo'
    markdown: |-
      {@lightControl
        type: widget
        prompts:
          - Dim the lights by 20
          - Increase by 35
          - Turn off the lights
          - Set it to 80
          - Lower by half
          - Max brightness
      }
    sections: 
      - blocks: 
          - name: 'lightControl'
            scrollable: false
            type: 'widget'
            prompts: 
              - 'Dim the lights by 20'
              - 'Increase by 35'
              - 'Turn off the lights'
              - 'Set it to 80'
              - 'Lower by half'
              - 'Max brightness'
        type: 'section'
    notes: []
    assets: []
  - key: 'pNxPyfLK'
    options: {}
    markdown: '## What if the tool to use is a widget schema?'
    sections: 
      - blocks: 
          - content: '## What if the tool to use is a widget schema?'
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: '5cGNbsJx'
    options: {}
    markdown: |-
      ### Experimental
      
      ```dart
      final schema = Schema.object(properties: {
        'textFields': Schema.array(
          description: 'A list of text fields',
          items: TextFieldSchemaDto.schema,
          nullable: true,
        ),
        'dropdowns': Schema.array(
          description: 'A list of dropdowns',
          items: DropdownSchemaDto.schema,
          nullable: true,
        ),
        'colorPickers': Schema.array(
          description: 'A list of colors pickers',
          items: ColorPickerDtoSchema.schema,
          nullable: true,
        ),
      });
      
      ```
    sections: 
      - blocks: 
          - content: |-
              ### Experimental
              
              ```dart
              final schema = Schema.object(properties: {
                'textFields': Schema.array(
                  description: 'A list of text fields',
                  items: TextFieldSchemaDto.schema,
                  nullable: true,
                ),
                'dropdowns': Schema.array(
                  description: 'A list of dropdowns',
                  items: DropdownSchemaDto.schema,
                  nullable: true,
                ),
                'colorPickers': Schema.array(
                  description: 'A list of colors pickers',
                  items: ColorPickerDtoSchema.schema,
                  nullable: true,
                ),
              });
              
              ```
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: 'J6DNhZau'
    options: 
      style: 'demo'
    markdown: |-
      {@widgetSchema
        type: widget
        prompts:
          - Change top colors
          - Change font
          - Change all colors
          - Change everything
      }
    sections: 
      - blocks: 
          - name: 'widgetSchema'
            scrollable: false
            type: 'widget'
            prompts: 
              - 'Change top colors'
              - 'Change font'
              - 'Change all colors'
              - 'Change everything'
        type: 'section'
    notes: []
    assets: []
  - key: '3kW1wOHd'
    options: {}
    markdown: '## The future of UI might be orchestrating user experiences rather than creating it.'
    sections: 
      - blocks: 
          - content: '## The future of UI might be orchestrating user experiences rather than creating it.'
            scrollable: false
        type: 'section'
    notes: []
    assets: []
  - key: 'UqCN11cB'
    options: {}
    markdown: |-
      ### Thank you
      
      Leo Farias
      @leoafarias
      (GitHub, Twitter/X)
    sections: 
      - blocks: 
          - content: |-
              ### Thank you
              
              Leo Farias
              @leoafarias
              (GitHub, Twitter/X)
            scrollable: false
        type: 'section'
    notes: []
    assets: []
